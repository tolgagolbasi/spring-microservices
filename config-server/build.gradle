/*
* Build file for config server
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'eclipse'

buildscript {
	project.ext {
         springBootVersion = '2.4.1'
         jarName = 'basic-config-server'
         versionName = '0.0.1'
         gradleDockerVersion = '1.2'
	}
    repositories {
        jcenter()
        mavenCentral()
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '6.7.1'
}

// Used by the Docker gradle plugin, group refers to the account under which the docker image is created
group = 'anilallewar'
mainClassName = 'com.anilallewar.microservices.config.ConfigApplication'
sourceCompatibility = 15
targetCompatibility = 15

repositories {
    mavenCentral()
    jcenter()
}



archivesBaseName = "${project.jarName}"
version = "${project.versionName}"

dependencies {
    implementation platform('org.springframework.cloud:spring-cloud-dependencies:2020.0.0')
    implementation("org.springframework.cloud:spring-cloud-config-server")
}



/*
* This task builds the docker image by copying the output of the "jar" gradle command
* and moving it to the "build/docker" directory which is used as the staging directory 
* by the docker gradle plugin. We then build the docker image by invoking the appropriate
* Dockerfile.  
*/
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  tagVersion = jar.version
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    // Copy the built fat jar to the Docker plugin staging directory
    copy {
      from jar
      into stageDir
    }
    // Copy the run.sh file to the Docker plugin staging directory
    copy {
      from "${project.buildDir}/resources/main/run.sh"
      into stageDir
    }
  }
}

run {
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4100,suspend=n','-Dspring.profiles.active=default']
}