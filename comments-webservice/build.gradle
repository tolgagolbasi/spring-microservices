/*
* Build file for Comments-webservice
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'eclipse'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

buildscript {
	project.ext {
         springBootVersion = '2.4.1'
         jarName = 'basic-comments-webservice'
         versionName = '0.0.1'
         gradleDockerVersion = '1.2'
         springCloudContractVesrion = '1.1.1.RELEASE'
	}
    repositories {
        jcenter()
        mavenCentral()
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        
        // Gradle docker plugin dependency
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
        
        // if using Stub Runner (consumer side) only remove this dependency
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${project.springCloudContractVesrion}"
    }
}
compileTestGroovy.enabled = false
task createWrapper(type: Wrapper) {
    gradleVersion = '6.7.1'
}

// Used by the Docker gradle plugin, group refers to the account under which the docker image is created
group = 'anilallewar'
mainClassName = 'com.anilallewar.microservices.comments.CommentsApplication'
sourceCompatibility = 15
targetCompatibility = 15

repositories {
    mavenCentral()
    jcenter()
}

ext {
	springCloudVersion = 'Hoxton.SR9'
}

archivesBaseName = "${project.jarName}"
version = "${project.versionName}"

dependencies {
    implementation platform('org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR9')
    // Basic Spring boot with config client
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation 'org.springframework.boot:spring-boot-starter-websocket:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.4.1'
    
    // Spring OAuth2 security
    implementation("org.springframework.boot:spring-boot-starter-security:2.4.1")
    implementation("org.springframework.security.oauth:spring-security-oauth2:2.4.1.RELEASE")
    implementation("org.springframework.security:spring-security-jwt:1.1.1.RELEASE")
    
    // Eureka client
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    
    // Consumer driven contracts server
    testImplementation('org.springframework.cloud:spring-cloud-starter-contract-verifier')
	
	// Zipkin tracing
	implementation('org.springframework.cloud:spring-cloud-starter-zipkin')

    implementation('io.rest-assured:spring-mock-mvc:4.3.3')
}



/*
* This task builds the docker image by copying the output of the "jar" gradle command
* and moving it to the "build/docker" directory which is used as the staging directory 
* by the docker gradle plugin. We then build the docker image by invoking the appropriate
* Dockerfile.  
*/
task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  tagVersion = jar.version
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    // Copy the built fat jar to the Docker plugin staging directory
    copy {
      from jar
      into stageDir
    }
    // Copy the run.sh file to the Docker plugin staging directory
    copy {
      from "${project.buildDir}/resources/main/run.sh"
      into stageDir
    }
  }
}

run {
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4300,suspend=n','-Dspring.profiles.active=default']
}

// Setup the package which contains base classes that the spring cloud contract test case would extend
contracts {
	packageWithBaseClasses = 'com.anilallewar.microservices.comments.contracts'
}

clean.doFirst {
	delete "${System.properties['user.home']}${File.separator}.m2${File.separator}repository${File.separator}anilallewar${File.separator}basic-comments-webservice"
	delete "${System.properties['user.home']}${File.separator}.m2${File.separator}repository${File.separator}anilallewar${File.separator}basic-comments-webservice-stubs"
}

// Setup the artifact id with which the stubs jar would be published, the group id comes from the 'group' attribute defined earlier 
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId jar.baseName
			version jar.version
            from components.java
        }
		stubs(MavenPublication) {
			artifactId "${jar.baseName}-stubs"
			version jar.version
			artifact verifierStubsJar
		}
    }
}